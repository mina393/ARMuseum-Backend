// <auto-generated />
using System;
using ARMuseum.Data.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ARMuseum.Migrations
{
    [DbContext(typeof(OurDbContext))]
    [Migration("20250508201622_RemovePasswordFromTbUserBecauseItsInAspNetUsers")]
    partial class RemovePasswordFromTbUserBecauseItsInAspNetUsers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ARMuseum.Data.Models.TbBuyAticket", b =>
                {
                    b.Property<int>("TOrderId")
                        .HasColumnType("int")
                        .HasColumnName("T_Order_Id");

                    b.Property<int>("MId")
                        .HasColumnType("int")
                        .HasColumnName("M_Id");

                    b.Property<decimal>("TAmountCents")
                        .HasColumnType("decimal(10, 4)")
                        .HasColumnName("T_Amount_Cents");

                    b.Property<DateTime>("TCreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("T_Created_AT");

                    b.Property<string>("TCurrency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("T_Currency");

                    b.Property<string>("TIsRefund")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("T_Is_Refund");

                    b.Property<string>("TSucces")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("T_Succes");

                    b.Property<int>("TicketId")
                        .HasColumnType("int")
                        .HasColumnName("Ticket_Id");

                    b.Property<int>("UId")
                        .HasColumnType("int")
                        .HasColumnName("U_Id");

                    b.HasKey("TOrderId");

                    b.HasIndex("MId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UId");

                    b.ToTable("TbBuyATicket");
                });

            modelBuilder.Entity("ARMuseum.Data.Models.TbCategory", b =>
                {
                    b.Property<int>("SId")
                        .HasColumnType("int")
                        .HasColumnName("S_Id");

                    b.Property<string>("CName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("C_Name");

                    b.Property<string>("CPeriodTime")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("C_Period_Time");

                    b.HasKey("SId", "CName");

                    b.ToTable("TbCategory");
                });

            modelBuilder.Entity("ARMuseum.Data.Models.TbMuseum", b =>
                {
                    b.Property<int>("MId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("M_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MId"));

                    b.Property<string>("MHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("M_History");

                    b.Property<string>("MImageName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("M_Image_Name");

                    b.Property<string>("MMapName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("M_Map_Name");

                    b.Property<string>("MName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("M_Name");

                    b.HasKey("MId");

                    b.ToTable("TbMuseum");
                });

            modelBuilder.Entity("ARMuseum.Data.Models.TbMuseumDepartment", b =>
                {
                    b.Property<int>("MId")
                        .HasColumnType("int")
                        .HasColumnName("M_Id");

                    b.Property<string>("MDepartments")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("M_Departments");

                    b.HasKey("MId", "MDepartments");

                    b.ToTable("TbMuseumDepartments");
                });

            modelBuilder.Entity("ARMuseum.Data.Models.TbStatue", b =>
                {
                    b.Property<int>("SId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("S_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SId"));

                    b.Property<int>("MId")
                        .HasColumnType("int")
                        .HasColumnName("M_Id");

                    b.Property<string>("S3dModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("S_3d_Model_Name");

                    b.Property<DateTime?>("SBirthDate")
                        .HasColumnType("datetime")
                        .HasColumnName("S_Birth_Date");

                    b.Property<DateTime?>("SDeathDate")
                        .HasColumnType("datetime")
                        .HasColumnName("S_Death_Date");

                    b.Property<string>("SLiveFaceName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("S_Live_Face_Name");

                    b.Property<string>("SName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("S_Name");

                    b.Property<string>("SStory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("S_Story");

                    b.HasKey("SId");

                    b.HasIndex("MId");

                    b.ToTable("TbStatue");
                });

            modelBuilder.Entity("ARMuseum.Data.Models.TbStatueVideo", b =>
                {
                    b.Property<int>("SId")
                        .HasColumnType("int")
                        .HasColumnName("S_Id");

                    b.Property<int>("VideoId")
                        .HasColumnType("int")
                        .HasColumnName("Video_Id");

                    b.Property<byte[]>("SVideos")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("S_Videos");

                    b.HasKey("SId", "VideoId");

                    b.ToTable("TbStatueVideos");
                });

            modelBuilder.Entity("ARMuseum.Data.Models.TbTicket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Ticket_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<int>("TicketLimitHour")
                        .HasColumnType("int")
                        .HasColumnName("Ticket_Limit_Hour");

                    b.Property<string>("TicketType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Ticket_Type");

                    b.HasKey("TicketId");

                    b.ToTable("TbTicket");
                });

            modelBuilder.Entity("ARMuseum.Data.Models.TbTicketPrice", b =>
                {
                    b.Property<int>("TicketId")
                        .HasColumnType("int")
                        .HasColumnName("Ticket_Id");

                    b.Property<DateOnly>("TicketDate")
                        .HasColumnType("date")
                        .HasColumnName("Ticket_Date");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("decimal(10, 4)")
                        .HasColumnName("Ticket_Price");

                    b.HasKey("TicketId", "TicketDate");

                    b.ToTable("TbTicketPrice");
                });

            modelBuilder.Entity("ARMuseum.Data.Models.TbUser", b =>
                {
                    b.Property<int>("UId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("U_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UId"));

                    b.Property<string>("AspNetUserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UCountry")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("U_Country");

                    b.Property<DateTime>("UDateOfBirth")
                        .HasColumnType("datetime")
                        .HasColumnName("U_DateOfBirth");

                    b.Property<string>("UEmail")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nchar(300)")
                        .HasColumnName("U_Email")
                        .IsFixedLength();

                    b.Property<string>("UFirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("U_FirstName");

                    b.Property<string>("UImageName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("U_Image_Name");

                    b.Property<string>("ULastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("U_LastName");

                    b.Property<string>("UPhone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("U_Phone");

                    b.Property<string>("UUserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("U_UserName");

                    b.HasKey("UId");

                    b.ToTable("TbUser");
                });

            modelBuilder.Entity("ARMuseum.Dtos.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UDateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("UFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ULastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ARMuseum.Data.Models.TbBuyAticket", b =>
                {
                    b.HasOne("ARMuseum.Data.Models.TbMuseum", "MIdNavigation")
                        .WithMany("TbBuyAtickets")
                        .HasForeignKey("MId")
                        .IsRequired()
                        .HasConstraintName("FK_TbBuyATicket_TbMuseum");

                    b.HasOne("ARMuseum.Data.Models.TbTicket", "Ticket")
                        .WithMany("TbBuyAtickets")
                        .HasForeignKey("TicketId")
                        .IsRequired()
                        .HasConstraintName("FK_TbBuyATicket_TbTicket");

                    b.HasOne("ARMuseum.Data.Models.TbUser", "UIdNavigation")
                        .WithMany("TbBuyAtickets")
                        .HasForeignKey("UId")
                        .IsRequired()
                        .HasConstraintName("FK_TbBuyATicket_TbUser");

                    b.Navigation("MIdNavigation");

                    b.Navigation("Ticket");

                    b.Navigation("UIdNavigation");
                });

            modelBuilder.Entity("ARMuseum.Data.Models.TbCategory", b =>
                {
                    b.HasOne("ARMuseum.Data.Models.TbStatue", "SIdNavigation")
                        .WithMany("TbCategories")
                        .HasForeignKey("SId")
                        .IsRequired()
                        .HasConstraintName("FK_TbCategory_TbStatue");

                    b.Navigation("SIdNavigation");
                });

            modelBuilder.Entity("ARMuseum.Data.Models.TbMuseumDepartment", b =>
                {
                    b.HasOne("ARMuseum.Data.Models.TbMuseum", "MIdNavigation")
                        .WithMany("TbMuseumDepartments")
                        .HasForeignKey("MId")
                        .IsRequired()
                        .HasConstraintName("FK_TbMuseumDepartments_TbMuseum");

                    b.Navigation("MIdNavigation");
                });

            modelBuilder.Entity("ARMuseum.Data.Models.TbStatue", b =>
                {
                    b.HasOne("ARMuseum.Data.Models.TbMuseum", "MIdNavigation")
                        .WithMany("TbStatues")
                        .HasForeignKey("MId")
                        .IsRequired()
                        .HasConstraintName("FK_TbStatue_TbMuseum");

                    b.Navigation("MIdNavigation");
                });

            modelBuilder.Entity("ARMuseum.Data.Models.TbStatueVideo", b =>
                {
                    b.HasOne("ARMuseum.Data.Models.TbStatue", "SIdNavigation")
                        .WithMany("TbStatueVideos")
                        .HasForeignKey("SId")
                        .IsRequired()
                        .HasConstraintName("FK_TbStatueVideos_TbStatue");

                    b.Navigation("SIdNavigation");
                });

            modelBuilder.Entity("ARMuseum.Data.Models.TbTicketPrice", b =>
                {
                    b.HasOne("ARMuseum.Data.Models.TbTicket", "Ticket")
                        .WithMany("TbTicketPrices")
                        .HasForeignKey("TicketId")
                        .IsRequired()
                        .HasConstraintName("FK_TbTicketPrice_TbTicket");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ARMuseum.Dtos.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ARMuseum.Dtos.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ARMuseum.Dtos.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ARMuseum.Dtos.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ARMuseum.Data.Models.TbMuseum", b =>
                {
                    b.Navigation("TbBuyAtickets");

                    b.Navigation("TbMuseumDepartments");

                    b.Navigation("TbStatues");
                });

            modelBuilder.Entity("ARMuseum.Data.Models.TbStatue", b =>
                {
                    b.Navigation("TbCategories");

                    b.Navigation("TbStatueVideos");
                });

            modelBuilder.Entity("ARMuseum.Data.Models.TbTicket", b =>
                {
                    b.Navigation("TbBuyAtickets");

                    b.Navigation("TbTicketPrices");
                });

            modelBuilder.Entity("ARMuseum.Data.Models.TbUser", b =>
                {
                    b.Navigation("TbBuyAtickets");
                });
#pragma warning restore 612, 618
        }
    }
}
